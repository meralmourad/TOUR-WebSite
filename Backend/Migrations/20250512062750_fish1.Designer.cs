// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250512062750_fish1")]
    partial class fish1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsApproved")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("SeatsNumber")
                        .HasColumnType("int");

                    b.Property<int>("TouristId")
                        .HasColumnType("int");

                    b.Property<int>("TravelAgencyId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TouristId");

                    b.HasIndex("TravelAgencyId");

                    b.HasIndex("TripId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsApproved = 1,
                            Rating = -1,
                            SeatsNumber = 2,
                            TouristId = 2,
                            TravelAgencyId = 3,
                            TripId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsApproved = 0,
                            Rating = -1,
                            SeatsNumber = 1,
                            TouristId = 11,
                            TravelAgencyId = 3,
                            TripId = 2
                        },
                        new
                        {
                            Id = 3,
                            IsApproved = -1,
                            Rating = -1,
                            SeatsNumber = 3,
                            TouristId = 12,
                            TravelAgencyId = 4,
                            TripId = 3
                        },
                        new
                        {
                            Id = 4,
                            IsApproved = 1,
                            Rating = -1,
                            SeatsNumber = 4,
                            TouristId = 13,
                            TravelAgencyId = 4,
                            TripId = 4
                        },
                        new
                        {
                            Id = 5,
                            IsApproved = 1,
                            Rating = -1,
                            SeatsNumber = 2,
                            TouristId = 14,
                            TravelAgencyId = 3,
                            TripId = 5
                        },
                        new
                        {
                            Id = 6,
                            IsApproved = 0,
                            Rating = -1,
                            SeatsNumber = 1,
                            TouristId = 15,
                            TravelAgencyId = 4,
                            TripId = 6
                        });
                });

            modelBuilder.Entity("Backend.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Relaxation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cultural"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Nature"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Luxury"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Family"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Romantic"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Wildlife"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Beach"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Adventure Sports"
                        });
                });

            modelBuilder.Entity("Backend.Models.Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("tripId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://example.com/paris1.jpg",
                            tripId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://example.com/paris2.jpg",
                            tripId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://example.com/maldives1.jpg",
                            tripId = 2
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://example.com/rome1.jpg",
                            tripId = 3
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://example.com/sydney1.jpg",
                            tripId = 5
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://example.com/capetown1.jpg",
                            tripId = 6
                        });
                });

            modelBuilder.Entity("Backend.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Welcome to the platform!",
                            ReceiverId = 2,
                            SenderId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Thank you!",
                            ReceiverId = 1,
                            SenderId = 2
                        });
                });

            modelBuilder.Entity("Backend.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Your trip to Paris has been approved.",
                            SenderId = 1,
                            Title = "Trip Approved"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Your booking for Maldives is confirmed.",
                            SenderId = 3,
                            Title = "Booking Confirmed"
                        });
                });

            modelBuilder.Entity("Backend.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "France",
                            Description = "The city of lights.",
                            Name = "Paris"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Maldives",
                            Description = "Tropical paradise.",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 3,
                            Country = "Italy",
                            Description = "The Eternal City.",
                            Name = "Rome"
                        },
                        new
                        {
                            Id = 4,
                            Country = "USA",
                            Description = "The city that never sleeps.",
                            Name = "New York"
                        },
                        new
                        {
                            Id = 5,
                            Country = "Japan",
                            Description = "A blend of tradition and modernity.",
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = 6,
                            Country = "Australia",
                            Description = "The Harbour City.",
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = 7,
                            Country = "South Africa",
                            Description = "A city of stunning landscapes.",
                            Name = "Cape Town"
                        },
                        new
                        {
                            Id = 8,
                            Country = "Brazil",
                            Description = "The Marvelous City.",
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = 9,
                            Country = "UAE",
                            Description = "The city of gold.",
                            Name = "Dubai"
                        },
                        new
                        {
                            Id = 10,
                            Country = "Turkey",
                            Description = "Where East meets West.",
                            Name = "Istanbul"
                        },
                        new
                        {
                            Id = 11,
                            Country = "Greece",
                            Description = "A picturesque island in the Aegean Sea.",
                            Name = "Santorini"
                        },
                        new
                        {
                            Id = 12,
                            Country = "Indonesia",
                            Description = "A tropical paradise with stunning beaches.",
                            Name = "Bali"
                        });
                });

            modelBuilder.Entity("Backend.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TripId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgencyId = 3,
                            Content = "Great trip!",
                            IsRead = false,
                            SenderId = 2,
                            TripId = 1
                        },
                        new
                        {
                            Id = 2,
                            AgencyId = 3,
                            Content = "Had some issues.",
                            IsRead = true,
                            SenderId = 11,
                            TripId = 2
                        });
                });

            modelBuilder.Entity("Backend.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSets")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Trips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSets = 20,
                            Description = "Explore the beauty of Paris with this amazing adventure package.",
                            EndDate = new DateOnly(2023, 6, 10),
                            Price = 1500,
                            Rating = 4.5,
                            StartDate = new DateOnly(2023, 6, 1),
                            Status = 1,
                            Title = "Paris Adventure",
                            VendorId = 3
                        },
                        new
                        {
                            Id = 2,
                            AvailableSets = 15,
                            Description = "Relax and unwind in the tropical paradise of Maldives.",
                            EndDate = new DateOnly(2023, 7, 8),
                            Price = 2000,
                            Rating = 4.7999999999999998,
                            StartDate = new DateOnly(2023, 7, 1),
                            Status = 1,
                            Title = "Maldives Getaway",
                            VendorId = 3
                        },
                        new
                        {
                            Id = 3,
                            AvailableSets = 25,
                            Description = "Discover the wonders of Rome.",
                            EndDate = new DateOnly(2023, 8, 10),
                            Price = 1200,
                            Rating = 4.7000000000000002,
                            StartDate = new DateOnly(2023, 8, 1),
                            Status = 1,
                            Title = "Rome Discovery",
                            VendorId = 4
                        },
                        new
                        {
                            Id = 4,
                            AvailableSets = 30,
                            Description = "Experience the culture of Tokyo.",
                            EndDate = new DateOnly(2023, 9, 12),
                            Price = 1800,
                            Rating = 4.9000000000000004,
                            StartDate = new DateOnly(2023, 9, 1),
                            Status = 1,
                            Title = "Tokyo Experience",
                            VendorId = 4
                        },
                        new
                        {
                            Id = 5,
                            AvailableSets = 20,
                            Description = "Explore the beauty of Sydney.",
                            EndDate = new DateOnly(2023, 10, 10),
                            Price = 1700,
                            Rating = 4.5999999999999996,
                            StartDate = new DateOnly(2023, 10, 1),
                            Status = 1,
                            Title = "Sydney Adventure",
                            VendorId = 3
                        },
                        new
                        {
                            Id = 6,
                            AvailableSets = 15,
                            Description = "Experience the wildlife of Cape Town.",
                            EndDate = new DateOnly(2023, 11, 12),
                            Price = 2500,
                            Rating = 4.9000000000000004,
                            StartDate = new DateOnly(2023, 11, 1),
                            Status = 1,
                            Title = "Cape Town Safari",
                            VendorId = 4
                        });
                });

            modelBuilder.Entity("Backend.Models.TripCategory", b =>
                {
                    b.Property<int>("tripId")
                        .HasColumnType("int");

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.HasKey("tripId", "categoryId");

                    b.HasIndex("categoryId");

                    b.ToTable("TripCategories");

                    b.HasData(
                        new
                        {
                            tripId = 1,
                            categoryId = 1
                        },
                        new
                        {
                            tripId = 1,
                            categoryId = 3
                        },
                        new
                        {
                            tripId = 2,
                            categoryId = 2
                        },
                        new
                        {
                            tripId = 2,
                            categoryId = 6
                        },
                        new
                        {
                            tripId = 3,
                            categoryId = 3
                        },
                        new
                        {
                            tripId = 3,
                            categoryId = 5
                        },
                        new
                        {
                            tripId = 4,
                            categoryId = 4
                        },
                        new
                        {
                            tripId = 4,
                            categoryId = 8
                        });
                });

            modelBuilder.Entity("Backend.Models.TripPlace", b =>
                {
                    b.Property<int>("TripsId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("TripsId", "PlaceId");

                    b.HasIndex("PlaceId");

                    b.ToTable("TripPlaces");

                    b.HasData(
                        new
                        {
                            TripsId = 1,
                            PlaceId = 1
                        },
                        new
                        {
                            TripsId = 2,
                            PlaceId = 2
                        },
                        new
                        {
                            TripsId = 3,
                            PlaceId = 3
                        },
                        new
                        {
                            TripsId = 4,
                            PlaceId = 5
                        });
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Admin Address",
                            Email = "admin@example.com",
                            IsApproved = true,
                            Name = "Admin",
                            Password = "admin123",
                            PhoneNumber = "1234567890",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Address = "123 Adventure Lane",
                            Email = "agency1@example.com",
                            IsApproved = true,
                            Name = "Global Adventures",
                            Password = "agency123",
                            PhoneNumber = "5551234567",
                            Role = "Agency"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Adventure Lane",
                            Email = "agency2@example.com",
                            IsApproved = true,
                            Name = "Adventure Co.",
                            Password = "password",
                            PhoneNumber = "1111111111",
                            Role = "Agency"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Luxury Street",
                            Email = "agency3@example.com",
                            IsApproved = true,
                            Name = "Luxury Travels",
                            Password = "password",
                            PhoneNumber = "2222222222",
                            Role = "Agency"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Alice's Address",
                            Email = "alice@example.com",
                            IsApproved = true,
                            Name = "Alice",
                            Password = "password",
                            PhoneNumber = "1231231234",
                            Role = "Tourist"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Bob's Address",
                            Email = "bob@example.com",
                            IsApproved = true,
                            Name = "Bob",
                            Password = "password",
                            PhoneNumber = "2342342345",
                            Role = "Tourist"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Charlie's Address",
                            Email = "charlie@example.com",
                            IsApproved = true,
                            Name = "Charlie",
                            Password = "password",
                            PhoneNumber = "3453453456",
                            Role = "Tourist"
                        },
                        new
                        {
                            Id = 8,
                            Address = "David's Address",
                            Email = "david@example.com",
                            IsApproved = true,
                            Name = "David",
                            Password = "password",
                            PhoneNumber = "4564564567",
                            Role = "Tourist"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Eve's Address",
                            Email = "eve@example.com",
                            IsApproved = true,
                            Name = "Eve",
                            Password = "password",
                            PhoneNumber = "5675675678",
                            Role = "Tourist"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Frank's Address",
                            Email = "frank@example.com",
                            IsApproved = true,
                            Name = "Frank",
                            Password = "password",
                            PhoneNumber = "6786786789",
                            Role = "Tourist"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Grace's Address",
                            Email = "grace@example.com",
                            IsApproved = true,
                            Name = "Grace",
                            Password = "password",
                            PhoneNumber = "7897897890",
                            Role = "Tourist"
                        },
                        new
                        {
                            Id = 12,
                            Address = "Hank's Address",
                            Email = "hank@example.com",
                            IsApproved = true,
                            Name = "Hank",
                            Password = "password",
                            PhoneNumber = "8908908901",
                            Role = "Tourist"
                        },
                        new
                        {
                            Id = 13,
                            Address = "Ivy's Address",
                            Email = "ivy@example.com",
                            IsApproved = true,
                            Name = "Ivy",
                            Password = "password",
                            PhoneNumber = "9019019012",
                            Role = "Tourist"
                        },
                        new
                        {
                            Id = 14,
                            Address = "Jack's Address",
                            Email = "jack@example.com",
                            IsApproved = true,
                            Name = "Jack",
                            Password = "password",
                            PhoneNumber = "1234561234",
                            Role = "Tourist"
                        },
                        new
                        {
                            Id = 15,
                            Address = "Karen's Address",
                            Email = "karen@example.com",
                            IsApproved = true,
                            Name = "Karen",
                            Password = "password",
                            PhoneNumber = "2345672345",
                            Role = "Tourist"
                        },
                        new
                        {
                            Id = 16,
                            Address = "Leo's Address",
                            Email = "leo@example.com",
                            IsApproved = true,
                            Name = "Leo",
                            Password = "password",
                            PhoneNumber = "3456783456",
                            Role = "Tourist"
                        },
                        new
                        {
                            Id = 17,
                            Address = "Mona's Address",
                            Email = "mona@example.com",
                            IsApproved = true,
                            Name = "Mona",
                            Password = "password",
                            PhoneNumber = "4567894567",
                            Role = "Tourist"
                        },
                        new
                        {
                            Id = 18,
                            Address = "Nina's Address",
                            Email = "nina@example.com",
                            IsApproved = true,
                            Name = "Nina",
                            Password = "password",
                            PhoneNumber = "5678905678",
                            Role = "Tourist"
                        });
                });

            modelBuilder.Entity("Backend.Models.UserNotification", b =>
                {
                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.HasKey("ReceiverId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotifications");

                    b.HasData(
                        new
                        {
                            ReceiverId = 2,
                            NotificationId = 1,
                            IsRead = false
                        },
                        new
                        {
                            ReceiverId = 11,
                            NotificationId = 2,
                            IsRead = true
                        });
                });

            modelBuilder.Entity("CategoryTrip", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("TripsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "TripsId");

                    b.HasIndex("TripsId");

                    b.ToTable("CategoryTrip");
                });

            modelBuilder.Entity("Backend.Models.Tourist", b =>
                {
                    b.HasBaseType("Backend.Models.User");

                    b.HasDiscriminator().HasValue("Tourist");
                });

            modelBuilder.Entity("Backend.Models.TravelAgency", b =>
                {
                    b.HasBaseType("Backend.Models.User");

                    b.HasDiscriminator().HasValue("TravelAgency");
                });

            modelBuilder.Entity("Backend.Models.Booking", b =>
                {
                    b.HasOne("Backend.Models.Category", null)
                        .WithMany("Bookings")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Backend.Models.Place", null)
                        .WithMany("Bookings")
                        .HasForeignKey("PlaceId");

                    b.HasOne("Backend.Models.Tourist", "Tourist")
                        .WithMany("Bookings")
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.TravelAgency", "TravelAgency")
                        .WithMany("Bookings")
                        .HasForeignKey("TravelAgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Trip", "Trip")
                        .WithMany("Bookings")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tourist");

                    b.Navigation("TravelAgency");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Backend.Models.Images", b =>
                {
                    b.HasOne("Backend.Models.Trip", "trip")
                        .WithMany("Image")
                        .HasForeignKey("tripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trip");
                });

            modelBuilder.Entity("Backend.Models.Message", b =>
                {
                    b.HasOne("Backend.Models.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Backend.Models.Notification", b =>
                {
                    b.HasOne("Backend.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Backend.Models.Report", b =>
                {
                    b.HasOne("Backend.Models.Place", null)
                        .WithMany("Reports")
                        .HasForeignKey("PlaceId");

                    b.HasOne("Backend.Models.User", "Sender")
                        .WithMany("Reports")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Trip", "Trip")
                        .WithMany("Reports")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Backend.Models.Trip", b =>
                {
                    b.HasOne("Backend.Models.TravelAgency", "Vendor")
                        .WithMany("Trips")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Backend.Models.TripCategory", b =>
                {
                    b.HasOne("Backend.Models.Category", "Category")
                        .WithMany("TripCategories")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Trip", "Trip")
                        .WithMany("TripCategories")
                        .HasForeignKey("tripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Backend.Models.TripPlace", b =>
                {
                    b.HasOne("Backend.Models.Place", "Place")
                        .WithMany("Trip_Places")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Trip", "Trip")
                        .WithMany("TripPlaces")
                        .HasForeignKey("TripsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Backend.Models.UserNotification", b =>
                {
                    b.HasOne("Backend.Models.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "Receiver")
                        .WithMany("UserNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("CategoryTrip", b =>
                {
                    b.HasOne("Backend.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Trip", null)
                        .WithMany()
                        .HasForeignKey("TripsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.Category", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TripCategories");
                });

            modelBuilder.Entity("Backend.Models.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("Backend.Models.Place", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reports");

                    b.Navigation("Trip_Places");
                });

            modelBuilder.Entity("Backend.Models.Trip", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Image");

                    b.Navigation("Reports");

                    b.Navigation("TripCategories");

                    b.Navigation("TripPlaces");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("Reports");

                    b.Navigation("SentMessages");

                    b.Navigation("SentNotifications");

                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("Backend.Models.Tourist", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Backend.Models.TravelAgency", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
